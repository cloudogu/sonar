// Code generated by mockery v2.53.3. DO NOT EDIT.

package casfilter

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// mockCasBrowserClient is an autogenerated mock type for the casBrowserClient type
type mockCasBrowserClient struct {
	mock.Mock
}

type mockCasBrowserClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCasBrowserClient) EXPECT() *mockCasBrowserClient_Expecter {
	return &mockCasBrowserClient_Expecter{mock: &_m.Mock}
}

// CreateHandler provides a mock function with given fields: nextHandler
func (_m *mockCasBrowserClient) CreateHandler(nextHandler http.Handler) http.Handler {
	ret := _m.Called(nextHandler)

	if len(ret) == 0 {
		panic("no return value specified for CreateHandler")
	}

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func(http.Handler) http.Handler); ok {
		r0 = rf(nextHandler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// mockCasBrowserClient_CreateHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateHandler'
type mockCasBrowserClient_CreateHandler_Call struct {
	*mock.Call
}

// CreateHandler is a helper method to define mock.On call
//   - nextHandler http.Handler
func (_e *mockCasBrowserClient_Expecter) CreateHandler(nextHandler interface{}) *mockCasBrowserClient_CreateHandler_Call {
	return &mockCasBrowserClient_CreateHandler_Call{Call: _e.mock.On("CreateHandler", nextHandler)}
}

func (_c *mockCasBrowserClient_CreateHandler_Call) Run(run func(nextHandler http.Handler)) *mockCasBrowserClient_CreateHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.Handler))
	})
	return _c
}

func (_c *mockCasBrowserClient_CreateHandler_Call) Return(_a0 http.Handler) *mockCasBrowserClient_CreateHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCasBrowserClient_CreateHandler_Call) RunAndReturn(run func(http.Handler) http.Handler) *mockCasBrowserClient_CreateHandler_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCasBrowserClient creates a new instance of mockCasBrowserClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCasBrowserClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCasBrowserClient {
	mock := &mockCasBrowserClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
