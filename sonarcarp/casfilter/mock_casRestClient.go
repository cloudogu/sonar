// Code generated by mockery v2.53.3. DO NOT EDIT.

package casfilter

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// mockCasRestClient is an autogenerated mock type for the casRestClient type
type mockCasRestClient struct {
	mock.Mock
}

type mockCasRestClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCasRestClient) EXPECT() *mockCasRestClient_Expecter {
	return &mockCasRestClient_Expecter{mock: &_m.Mock}
}

// HandleFunc provides a mock function with given fields: nextHandler
func (_m *mockCasRestClient) HandleFunc(nextHandler func(http.ResponseWriter, *http.Request)) http.Handler {
	ret := _m.Called(nextHandler)

	if len(ret) == 0 {
		panic("no return value specified for HandleFunc")
	}

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func(func(http.ResponseWriter, *http.Request)) http.Handler); ok {
		r0 = rf(nextHandler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// mockCasRestClient_HandleFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleFunc'
type mockCasRestClient_HandleFunc_Call struct {
	*mock.Call
}

// HandleFunc is a helper method to define mock.On call
//   - nextHandler func(http.ResponseWriter , *http.Request)
func (_e *mockCasRestClient_Expecter) HandleFunc(nextHandler interface{}) *mockCasRestClient_HandleFunc_Call {
	return &mockCasRestClient_HandleFunc_Call{Call: _e.mock.On("HandleFunc", nextHandler)}
}

func (_c *mockCasRestClient_HandleFunc_Call) Run(run func(nextHandler func(http.ResponseWriter, *http.Request))) *mockCasRestClient_HandleFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(http.ResponseWriter, *http.Request)))
	})
	return _c
}

func (_c *mockCasRestClient_HandleFunc_Call) Return(_a0 http.Handler) *mockCasRestClient_HandleFunc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCasRestClient_HandleFunc_Call) RunAndReturn(run func(func(http.ResponseWriter, *http.Request)) http.Handler) *mockCasRestClient_HandleFunc_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCasRestClient creates a new instance of mockCasRestClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCasRestClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCasRestClient {
	mock := &mockCasRestClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
