// Code generated by mockery v2.53.3. DO NOT EDIT.

package proxy

import (
	http "net/http"

	cas "github.com/cloudogu/go-cas/v2"

	mock "github.com/stretchr/testify/mock"
)

// mockCasClient is an autogenerated mock type for the casClient type
type mockCasClient struct {
	mock.Mock
}

type mockCasClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCasClient) EXPECT() *mockCasClient_Expecter {
	return &mockCasClient_Expecter{mock: &_m.Mock}
}

// Attributes provides a mock function with given fields: r
func (_m *mockCasClient) Attributes(r *http.Request) cas.UserAttributes {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Attributes")
	}

	var r0 cas.UserAttributes
	if rf, ok := ret.Get(0).(func(*http.Request) cas.UserAttributes); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cas.UserAttributes)
		}
	}

	return r0
}

// mockCasClient_Attributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attributes'
type mockCasClient_Attributes_Call struct {
	*mock.Call
}

// Attributes is a helper method to define mock.On call
//   - r *http.Request
func (_e *mockCasClient_Expecter) Attributes(r interface{}) *mockCasClient_Attributes_Call {
	return &mockCasClient_Attributes_Call{Call: _e.mock.On("Attributes", r)}
}

func (_c *mockCasClient_Attributes_Call) Run(run func(r *http.Request)) *mockCasClient_Attributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *mockCasClient_Attributes_Call) Return(_a0 cas.UserAttributes) *mockCasClient_Attributes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCasClient_Attributes_Call) RunAndReturn(run func(*http.Request) cas.UserAttributes) *mockCasClient_Attributes_Call {
	_c.Call.Return(run)
	return _c
}

// IsAuthenticated provides a mock function with given fields: _a0
func (_m *mockCasClient) IsAuthenticated(_a0 *http.Request) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsAuthenticated")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*http.Request) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockCasClient_IsAuthenticated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAuthenticated'
type mockCasClient_IsAuthenticated_Call struct {
	*mock.Call
}

// IsAuthenticated is a helper method to define mock.On call
//   - _a0 *http.Request
func (_e *mockCasClient_Expecter) IsAuthenticated(_a0 interface{}) *mockCasClient_IsAuthenticated_Call {
	return &mockCasClient_IsAuthenticated_Call{Call: _e.mock.On("IsAuthenticated", _a0)}
}

func (_c *mockCasClient_IsAuthenticated_Call) Run(run func(_a0 *http.Request)) *mockCasClient_IsAuthenticated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *mockCasClient_IsAuthenticated_Call) Return(_a0 bool) *mockCasClient_IsAuthenticated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCasClient_IsAuthenticated_Call) RunAndReturn(run func(*http.Request) bool) *mockCasClient_IsAuthenticated_Call {
	_c.Call.Return(run)
	return _c
}

// RedirectToLogin provides a mock function with given fields: w, r
func (_m *mockCasClient) RedirectToLogin(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// mockCasClient_RedirectToLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RedirectToLogin'
type mockCasClient_RedirectToLogin_Call struct {
	*mock.Call
}

// RedirectToLogin is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *mockCasClient_Expecter) RedirectToLogin(w interface{}, r interface{}) *mockCasClient_RedirectToLogin_Call {
	return &mockCasClient_RedirectToLogin_Call{Call: _e.mock.On("RedirectToLogin", w, r)}
}

func (_c *mockCasClient_RedirectToLogin_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *mockCasClient_RedirectToLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *mockCasClient_RedirectToLogin_Call) Return() *mockCasClient_RedirectToLogin_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockCasClient_RedirectToLogin_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *mockCasClient_RedirectToLogin_Call {
	_c.Run(run)
	return _c
}

// RedirectToLogout provides a mock function with given fields: w, r
func (_m *mockCasClient) RedirectToLogout(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// mockCasClient_RedirectToLogout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RedirectToLogout'
type mockCasClient_RedirectToLogout_Call struct {
	*mock.Call
}

// RedirectToLogout is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *mockCasClient_Expecter) RedirectToLogout(w interface{}, r interface{}) *mockCasClient_RedirectToLogout_Call {
	return &mockCasClient_RedirectToLogout_Call{Call: _e.mock.On("RedirectToLogout", w, r)}
}

func (_c *mockCasClient_RedirectToLogout_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *mockCasClient_RedirectToLogout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *mockCasClient_RedirectToLogout_Call) Return() *mockCasClient_RedirectToLogout_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockCasClient_RedirectToLogout_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *mockCasClient_RedirectToLogout_Call {
	_c.Run(run)
	return _c
}

// Username provides a mock function with given fields: r
func (_m *mockCasClient) Username(r *http.Request) string {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Username")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(*http.Request) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockCasClient_Username_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Username'
type mockCasClient_Username_Call struct {
	*mock.Call
}

// Username is a helper method to define mock.On call
//   - r *http.Request
func (_e *mockCasClient_Expecter) Username(r interface{}) *mockCasClient_Username_Call {
	return &mockCasClient_Username_Call{Call: _e.mock.On("Username", r)}
}

func (_c *mockCasClient_Username_Call) Run(run func(r *http.Request)) *mockCasClient_Username_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *mockCasClient_Username_Call) Return(_a0 string) *mockCasClient_Username_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCasClient_Username_Call) RunAndReturn(run func(*http.Request) string) *mockCasClient_Username_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCasClient creates a new instance of mockCasClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCasClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCasClient {
	mock := &mockCasClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
