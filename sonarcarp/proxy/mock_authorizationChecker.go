// Code generated by mockery v2.42.1. DO NOT EDIT.

package proxy

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// mockAuthorizationChecker is an autogenerated mock type for the authorizationChecker type
type mockAuthorizationChecker struct {
	mock.Mock
}

type mockAuthorizationChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAuthorizationChecker) EXPECT() *mockAuthorizationChecker_Expecter {
	return &mockAuthorizationChecker_Expecter{mock: &_m.Mock}
}

// IsAuthorized provides a mock function with given fields: r
func (_m *mockAuthorizationChecker) IsAuthorized(r *http.Request) bool {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for IsAuthorized")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*http.Request) bool); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockAuthorizationChecker_IsAuthorized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAuthorized'
type mockAuthorizationChecker_IsAuthorized_Call struct {
	*mock.Call
}

// IsAuthorized is a helper method to define mock.On call
//   - r *http.Request
func (_e *mockAuthorizationChecker_Expecter) IsAuthorized(r interface{}) *mockAuthorizationChecker_IsAuthorized_Call {
	return &mockAuthorizationChecker_IsAuthorized_Call{Call: _e.mock.On("IsAuthorized", r)}
}

func (_c *mockAuthorizationChecker_IsAuthorized_Call) Run(run func(r *http.Request)) *mockAuthorizationChecker_IsAuthorized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *mockAuthorizationChecker_IsAuthorized_Call) Return(_a0 bool) *mockAuthorizationChecker_IsAuthorized_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAuthorizationChecker_IsAuthorized_Call) RunAndReturn(run func(*http.Request) bool) *mockAuthorizationChecker_IsAuthorized_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAuthorizationChecker creates a new instance of mockAuthorizationChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAuthorizationChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAuthorizationChecker {
	mock := &mockAuthorizationChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
