// Code generated by mockery v2.42.1. DO NOT EDIT.

package proxy

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// mockUnauthorizedServer is an autogenerated mock type for the unauthorizedServer type
type mockUnauthorizedServer struct {
	mock.Mock
}

type mockUnauthorizedServer_Expecter struct {
	mock *mock.Mock
}

func (_m *mockUnauthorizedServer) EXPECT() *mockUnauthorizedServer_Expecter {
	return &mockUnauthorizedServer_Expecter{mock: &_m.Mock}
}

// ServeUnauthorized provides a mock function with given fields: writer, req
func (_m *mockUnauthorizedServer) ServeUnauthorized(writer http.ResponseWriter, req *http.Request) {
	_m.Called(writer, req)
}

// mockUnauthorizedServer_ServeUnauthorized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeUnauthorized'
type mockUnauthorizedServer_ServeUnauthorized_Call struct {
	*mock.Call
}

// ServeUnauthorized is a helper method to define mock.On call
//   - writer http.ResponseWriter
//   - req *http.Request
func (_e *mockUnauthorizedServer_Expecter) ServeUnauthorized(writer interface{}, req interface{}) *mockUnauthorizedServer_ServeUnauthorized_Call {
	return &mockUnauthorizedServer_ServeUnauthorized_Call{Call: _e.mock.On("ServeUnauthorized", writer, req)}
}

func (_c *mockUnauthorizedServer_ServeUnauthorized_Call) Run(run func(writer http.ResponseWriter, req *http.Request)) *mockUnauthorizedServer_ServeUnauthorized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *mockUnauthorizedServer_ServeUnauthorized_Call) Return() *mockUnauthorizedServer_ServeUnauthorized_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockUnauthorizedServer_ServeUnauthorized_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *mockUnauthorizedServer_ServeUnauthorized_Call {
	_c.Call.Return(run)
	return _c
}

// newMockUnauthorizedServer creates a new instance of mockUnauthorizedServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockUnauthorizedServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockUnauthorizedServer {
	mock := &mockUnauthorizedServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
